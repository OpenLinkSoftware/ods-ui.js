<?include header.vsp ?>

    <style type="text/css">
      {+include("static/default.css")+}
    </style>

<body class="sub">

<div class="wrapper">

  <?include branding.html ?>

  <div class="ods-container rc bs" role="main">

    <div class="navigation-container">

      <?include navigation.vsp ?>

    </div>

    <div class="content-container rc">

      <div class="content clearfix">

        <article>
          <header>
            <h1 class="classTitle">ODS JavaScript Client Library</h1>
          </header>

    <div id="content">
      <p class="first">The ODS JavaScript Client Library provides easy authentication and registration for ODS clients.</p>

      <p>ODS already provides a very convinient authentication and registration API as part of the <a href="odsdox/">ODS HTTP API</a>. This JavaScript client
        library makes it even easier by giving the client developer a set of simple functions to access the ODS authentication functionality.</p>
      <p>The following list contains all classes that make up the ODS JavaScript Client Library. The <a href="jods_ods.vsp">ODS namespace</a> is the starting point for any client.</p>

      <h2>Quick Start</h2>

      <p>To start using the ODS JS Library in a client, one first needs to include the source file:
        <pre>&lt;script src="http://web.ods.openlinksw.com/js/ods-auth.js"&gt;&lt;/script&gt;</pre></p>
      <p>Then one can optionally set the host of the ODS instance one wants to interface with:
        <pre>{+new Link().toSymbol("ODS#setOdsHost")+}("mydomain.com", "mydomain.com");</pre></p>
      <p>Login buttons should be connected to the corresponding functions in ODS. If one, for example,
        wants to allow login via Twitter one would connect the button to the following function:</p>

      <pre>function() {
  {+new Link().toSymbol("ODS#createThirdPartyServiceSession")+}("twitter",
                                     "http://mydomain.com/index.html");
}</pre>

      <p>The execution of that function will result in a redirect, allowing the user to log into Twitter
      and return to the client callback URL, in this case <em>index.html</em>. The URL will then contain
      query parameters informing about success of failure. These parameters are best processed via:</p>

      <pre>{+new Link().toSymbol("ODS#handleAuthenticationCallback")+}(mySuccessFunction,
                                 myConfirmFunction,
                                 myErrorFunction);</pre>

      <p>On a successful login the <em>mySuccessFunction</em> function will be called with one parameter:
      the new <a href="jods_ods_session.vsp">ODS.Session</a> object.</p>

      <p>To keep track of all the different authentication methods ODS support one may use {+new Link().toSymbol("ODS#authenticationMethods")+}
      or {+new Link().toSymbol("ODS#registrationMethods")+} to get the supported methods and then create the corresponding links programmatically.</p>

      <p>Account creation is done in the same way via {+new Link().toSymbol("ODS#registerViaThirdPartyService")+} or
      {+new Link().toSymbol("ODS#registerViaBrowserId")+}. The {+new Link().toSymbol("ODS")+} namespace offers several
      functions to log into ODS, to create accounts, or to do one or the other automatically.</p>

			<h2 class="classTitle">Class Index</h2>

			<for each="thisClass" in="data">
        <if test="thisClass.methods.length > 0 || thisClass.events.length > 0">
          <div>
            <h2>{+(new Link().toSymbol(thisClass.alias))+}</h2>
            {+resolveLinks(summarize(thisClass.desc))+}
          </div>
          <hr />
        </if>
			</for>


</article>


  <aside>
<!-- ============================== classes index ============================ -->
    <div id="index">
      <!-- begin publish.classesIndex -->
      {+publish.classesIndex+}
      <!-- end publish.classesIndex -->
    </div>
    <?include sidebar.vsp ?>
  </aside>


  </div>
 </div>
</div>

<?include footer.vsp ?>
